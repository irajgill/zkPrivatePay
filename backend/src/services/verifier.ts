import {groth16} from 'snarkjs';
import ed25519 from 'tweetnacl';

export interface VerificationKey {
  protocol: string;
  curve: string;
  nPublic: number;
  vk_alpha_1: string[];
  vk_beta_2: string[][];
  vk_gamma_2: string[][];
  vk_delta_2: string[][];
  vk_alphabeta_12: string[][][];
  IC: string[][];
}

// Verification keys from your compiled circuits
export const KYC_VERIFICATION_KEY: VerificationKey = {
  "protocol": "groth16",
  "curve": "bn128",
  "nPublic": 1,
  "vk_alpha_1": [
    "20491192805390485299153009773594534940189261866228447918068658471970481763042",
    "9383485363053290200918347156157836566562967994039712273449902621266178545958",
    "1"
  ],
  "vk_beta_2": [
    [
      "6375614351688725206403948262868962793625744043794305715222011528459656738731",
      "4252822878758300859123897981450591353533073413197771768651442665752259397132"
    ],
    [
      "10505242626370262277552901082094356697409835680220590971873171140371331206856",
      "21847035105528745403288232691147584728191162732299865338377159692350059136679"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_gamma_2": [
    [
      "10857046999023057135944570762232829481370756359578518086990519993285655852781",
      "11559732032986387107991004021392285783925812861821192530917403151452391805634"
    ],
    [
      "8495653923123431417604973247489272438418190587263600148770280649306958101930",
      "4082367875863433681332203403145435568316851327593401208105741076214120093531"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_delta_2": [
    [
      "225284999225153846944991744293179220696903490288065208748858603088648479310",
      "12806526041411834688608867477335500842114357515573916296608882607404469479576"
    ],
    [
      "673804151563723499011755643014569320780555140505767506690069277665161017447",
      "6121546736731776597390749412787125216436386812478322287987457985017051961620"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_alphabeta_12": [
    [
      [
        "2029413683389138792403550203267699914886160938906632433982220835551125967885",
        "21072700047562757817161031222997517981543347628379360635925549008442030252106"
      ],
      [
        "5940354580057074848093997050200682056184807770593307860589430076672439820312",
        "12156638873931618554171829126792193045421052652279363021382169897324752428276"
      ],
      [
        "7898200236362823042373859371574133993780991612861777490112507062703164551277",
        "7074218545237549455313236346927434013100842096812539264420499035217050630853"
      ]
    ],
    [
      [
        "7077479683546002997211712695946002074877511277312570035766170199895071832130",
        "10093483419865920389913245021038182291233451549023025229112148274109565435465"
      ],
      [
        "4595479056700221319381530156280926371456704509942304414423590385166031118820",
        "19831328484489333784475432780421641293929726139240675179672856274388269393268"
      ],
      [
        "11934129596455521040620786944827826205713621633706285934057045369193958244500",
        "8037395052364110730298837004334506829870972346962140206007064471173334027475"
      ]
    ]
  ],
  "IC": [
    [
      "6256199268103000237692132921884600314575600137306567698196346190213879557463",
      "12345697502452534672353003301283327190820225292682360617448426083059554115965",
      "1"
    ],
    [
      "13866152680969538477595018354158005731727463316086584229944947087083768055958",
      "14343704574133790930195162245102027695853420792662046611761776096024241435910",
      "1"
    ]
  ]
};

export const PAYMENT_VERIFICATION_KEY: VerificationKey = {
  "protocol": "groth16",
  "curve": "bn128",
  "nPublic": 4,
  "vk_alpha_1": [
    "20491192805390485299153009773594534940189261866228447918068658471970481763042",
    "9383485363053290200918347156157836566562967994039712273449902621266178545958",
    "1"
  ],
  "vk_beta_2": [
    [
      "6375614351688725206403948262868962793625744043794305715222011528459656738731",
      "4252822878758300859123897981450591353533073413197771768651442665752259397132"
    ],
    [
      "10505242626370262277552901082094356697409835680220590971873171140371331206856",
      "21847035105528745403288232691147584728191162732299865338377159692350059136679"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_gamma_2": [
    [
      "10857046999023057135944570762232829481370756359578518086990519993285655852781",
      "11559732032986387107991004021392285783925812861821192530917403151452391805634"
    ],
    [
      "8495653923123431417604973247489272438wing272438418190587263600148770280649306958101930",
      "4082367875863433681332203403145435568316851327593401208105741076214120093531"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_delta_2": [
    [
      "1848851454232642771742379812880103780213320957977287622106525674482212605165",
      "10806426817910329487396214874991033400783060852369503066528094804026018715379"
    ],
    [
      "276060549013729869356531285100174505362007069218118518144718817771175749265",
      "11057681515707109866485683072781972144168107501056531240058969040456669133384"
    ],
    [
      "1",
      "0"
    ]
  ],
  "vk_alphabeta_12": [
    [
      [
        "2029413683389138792403550203267699914886160938906632433982220835551125967885",
        "21072700047562757817161031222997517981543347628379360635925549008442030252106"
      ],
      [
        "5940354580057074848093997050200682056184807770593307860589430076672439820312",
        "12156638873931618554171829126792193045421052652279363021382169897324752428276"
      ],
      [
        "7898200236362823042373859371574133993780991612861777490112507062703164551277",
        "7074218545237549455313236346927434013100842096812539264420499035217050630853"
      ]
    ],
    [
      [
        "7077479683546002997211712695946002074877511277312570035766170199895071832130",
        "10093483419865920389913245021038182291233451549023025229112148274109565435465"
      ],
      [
        "4595479056700221319381530156280926371456704509942304414423590385166031118820",
        "19831328484489333784475432780421641293929726139240675179672856274388269393268"
      ],
      [
        "11934129596455521040620786944827826205713621633706285934057045369193958244500",
        "8037395052364110730298837004334506829870972346962140206007064471173334027475"
      ]
    ]
  ],
  "IC": [
    [
      "17814159753187543525221507654563529719434913924230214492795786813263971527257",
      "16139550961330723880915474011560700088261587544186502471793545828814314935831",
      "1"
    ],
    [
      "10969001893180328363393684075519188916159641532228831818392321642710324975257",
      "12040089650037395265546203471962696113873123408136834841237929439875667998141",
      "1"
    ],
    [
      "5596015892264316698195094305528975112652272268680249771326372778031838137719",
      "4583621649704203974446772342889062377936128253781305505109325976457014552037",
      "1"
    ],
    [
      "14954896951945060731350484945096907483217301798076536304802978779800456106119",
      "19273482792672201706070853600284566823912660467188947679422724157089630606726",
      "1"
    ],
    [
      "10659295863411271173540059827578143657537917105988615324302986354402756238829",
      "14340536386642499897239701712793663628712347231179806430870863447472924307947",
      "1"
    ]
  ]
};

/**
 * Verifies a Groth16 proof using embedded verification keys
 */
export async function verifyProof(
  proof: any, 
  publicSignals: string[], 
  circuitType: 'payment' | 'kyc'
): Promise<boolean> {
  try {
    const vkey = circuitType === 'payment' ? PAYMENT_VERIFICATION_KEY : KYC_VERIFICATION_KEY;
    
    // Validate public signals count
    if (publicSignals.length !== vkey.nPublic) {
      console.error(`Invalid public signals count. Expected ${vkey.nPublic}, got ${publicSignals.length}`);
      return false;
    }
    
    const isValid = await groth16.verify(vkey, publicSignals, proof);
    return isValid;
  } catch (error) {
    console.error(`Proof verification failed:`, error);
    return false;
  }
}

/**
 * Creates attestation signature for verified proof
 */
export function createAttestationSignature(
  proofHash: string,
  topic: string,
  privateKey: Uint8Array
): { signature: string, pubkey: string } {
  const message = `zkPP:attest:${topic}${proofHash}`;
  const messageBytes = new TextEncoder().encode(message);
  
  const keyPair = ed25519.sign.keyPair.fromSecretKey(privateKey);
  const signature = ed25519.sign(messageBytes, privateKey);
  
  return {
    signature: Buffer.from(signature).toString('hex'),
    pubkey: Buffer.from(keyPair.publicKey).toString('hex')
  };
}

/**
 * Verifies attestation signature 
 */
export function verifyAttestationSignature(
  proofHash: string,
  topic: string,
  signature: string,
  pubkey: string
): boolean {
  try {
    const message = `zkPP:attest:${topic}${proofHash}`;
    const messageBytes = new TextEncoder().encode(message);
    const sigBytes = Buffer.from(signature, 'hex');
    const pubkeyBytes = Buffer.from(pubkey, 'hex');
    
    return ed25519.sign.open(sigBytes, pubkeyBytes) !== null;
  } catch (error) {
    console.error('Attestation verification failed:', error);
    return false;
  }
}

/**
 * Generate mock verifier attestations for development
 */
export function generateMockAttestations(proofHash: string, topic: string, count: number = 2): {
  attesters: string[],
  signatures: string[],
  pubkeys: string[]
} {
  const attesters: string[] = [];
  const signatures: string[] = [];
  const pubkeys: string[] = [];
  
  for (let i = 0; i < count; i++) {
    // Generate random ed25519 key pair for mock verifier
    const keyPair = ed25519.sign.keyPair();
    const mockAddress = `0x${'0'.repeat(40)}${i.toString(16).padStart(24, '0')}`;
    
    const attestation = createAttestationSignature(proofHash, topic, keyPair.secretKey);
    
    attesters.push(mockAddress);
    signatures.push(attestation.signature);
    pubkeys.push(attestation.pubkey);
  }
  
  return { attesters, signatures, pubkeys };
}
