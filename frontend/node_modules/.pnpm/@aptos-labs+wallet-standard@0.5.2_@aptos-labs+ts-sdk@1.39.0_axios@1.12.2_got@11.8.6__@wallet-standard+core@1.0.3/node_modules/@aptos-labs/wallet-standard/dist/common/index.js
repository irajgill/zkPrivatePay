"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _createStarExport(obj) { Object.keys(obj) .filter((key) => key !== "default" && key !== "__esModule") .forEach((key) => { if (exports.hasOwnProperty(key)) { return; } Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]}); }); } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _core = require('@wallet-standard/core'); _createStarExport(_core);var _tssdk = require('@aptos-labs/ts-sdk');var g=class r extends _tssdk.Serializable{constructor({address:t,publicKey:o,ansName:e}){super(),this.address=_tssdk.AccountAddress.from(t),this.publicKey=o,this.ansName=e}serialize(t){if(this.address.serialize(t),this.publicKey instanceof _tssdk.Ed25519PublicKey)t.serializeU32AsUleb128(_tssdk.SigningScheme.Ed25519);else if(this.publicKey instanceof _tssdk.MultiEd25519PublicKey)t.serializeU32AsUleb128(_tssdk.SigningScheme.MultiEd25519);else if(this.publicKey instanceof _tssdk.AnyPublicKey)t.serializeU32AsUleb128(_tssdk.SigningScheme.SingleKey);else if(this.publicKey instanceof _tssdk.MultiKey)t.serializeU32AsUleb128(_tssdk.SigningScheme.MultiKey);else throw new Error("Unsupported public key");this.publicKey.serialize(t),t.serializeStr(_nullishCoalesce(this.ansName, () => ("")))}static deserialize(t){let o=_tssdk.AccountAddress.deserialize(t),e=t.deserializeUleb128AsU32(),n;switch(e){case _tssdk.SigningScheme.Ed25519:n=_tssdk.Ed25519PublicKey.deserialize(t);break;case _tssdk.SigningScheme.MultiEd25519:n=_tssdk.MultiEd25519PublicKey.deserialize(t);break;case _tssdk.SigningScheme.SingleKey:n=_tssdk.AnyPublicKey.deserialize(t);break;case _tssdk.SigningScheme.MultiKey:n=_tssdk.MultiKey.deserialize(t);break;default:throw new Error(`Unknown variant index for WrappedPublicKey: ${e}`)}let p=t.deserializeStr()||void 0;return new r({address:o,publicKey:n,ansName:p})}};var y="aptos:devnet",x= exports.APTOS_TESTNET_CHAIN ="aptos:testnet",h= exports.APTOS_LOCALNET_CHAIN ="aptos:localnet",f= exports.APTOS_MAINNET_CHAIN ="aptos:mainnet",P= exports.APTOS_CHAINS =[y,x,h,f];var N=["aptos:account","aptos:connect","aptos:disconnect","aptos:network","aptos:onAccountChange","aptos:onNetworkChange","aptos:signMessage","aptos:signTransaction"];function I(r,t=[]){return[...N,...t].every(o=>o in r.features)}function W(){let{get:r,on:t}=_core.getWallets.call(void 0, ),o=r(),e=[];return o.map(n=>{I(n)&&e.push(n)}),{aptosWallets:e,on:t}}var T=(e=>(e[e.Unauthorized=4100]="Unauthorized",e[e.Unsupported=4200]="Unsupported",e[e.InternalError=-30001]="InternalError",e))(T||{}),m= exports.AptosWalletErrors =Object.freeze({4100:{status:"Unauthorized",message:"The requested method and/or account has not been authorized by the user."},[-30001]:{status:"Internal error",message:"Something went wrong within the wallet."},4200:{status:"Unsupported",message:"The requested feature is not supported."}}),d= exports.AptosWalletError =class r extends Error{constructor(t,o){super(_nullishCoalesce(_nullishCoalesce(o, () => (_optionalChain([m, 'access', _ => _[t], 'optionalAccess', _2 => _2.message]))), () => ("Unknown error occurred"))),this.code=t,this.status=_nullishCoalesce(_optionalChain([m, 'access', _3 => _3[t], 'optionalAccess', _4 => _4.status]), () => ("Unknown error")),this.name="AptosWalletError",Object.setPrototypeOf(this,r.prototype)}};var K="aptos:signAndSubmitTransaction";var z="aptos:signMessage";var H="aptos:account";var j="aptos:connect";var B="aptos:network";var Q="aptos:onAccountChange";var Y="aptos:onNetworkChange";var tt="aptos:changeNetwork";var ot="aptos:disconnect";var st="aptos:signTransaction";var pt="aptos:openInMobileApp";var it="aptos:signIn";var w=(o=>(o.APPROVED="Approved",o.REJECTED="Rejected",o))(w||{});exports.APTOS_CHAINS = P; exports.APTOS_DEVNET_CHAIN = y; exports.APTOS_LOCALNET_CHAIN = h; exports.APTOS_MAINNET_CHAIN = f; exports.APTOS_TESTNET_CHAIN = x; exports.AccountInfo = g; exports.AptosChangeNetworkNamespace = tt; exports.AptosConnectNamespace = j; exports.AptosDisconnectNamespace = ot; exports.AptosGetAccountNamespace = H; exports.AptosGetNetworkNamespace = B; exports.AptosOnAccountChangeNamespace = Q; exports.AptosOnNetworkChangeNamespace = Y; exports.AptosOpenInMobileAppNamespace = pt; exports.AptosSignAndSubmitTransactionNamespace = K; exports.AptosSignInNamespace = it; exports.AptosSignMessageNamespace = z; exports.AptosSignTransactionNamespace = st; exports.AptosWalletError = d; exports.AptosWalletErrorCode = T; exports.AptosWalletErrors = m; exports.UserResponseStatus = w; exports.getAptosWallets = W; exports.isWalletWithRequiredFeatureSet = I;
//# sourceMappingURL=index.js.map