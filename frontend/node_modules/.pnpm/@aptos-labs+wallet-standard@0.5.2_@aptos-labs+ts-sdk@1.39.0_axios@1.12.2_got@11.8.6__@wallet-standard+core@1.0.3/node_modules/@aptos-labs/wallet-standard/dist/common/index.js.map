{"version":3,"sources":["../../src/index.ts","../../src/AccountInfo.ts"],"names":["AccountInfo","_AccountInfo","Serializable","address","publicKey","ansName","AccountAddress","serializer","Ed25519PublicKey","SigningScheme","MultiEd25519PublicKey","AnyPublicKey","MultiKey","deserializer","variant"],"mappings":"AAGA,ghCAAc,2CCSP,IAQMA,CAAAA,CAAN,MAAMC,EAAAA,QAAoBC,mBAAa,CAK5C,WAAA,CAAY,CAAE,OAAA,CAAAC,CAAAA,CAAS,SAAA,CAAAC,CAAAA,CAAW,OAAA,CAAAC,CAAQ,CAAA,CAAqB,CAC7D,KAAA,CAAM,CAAA,CACN,IAAA,CAAK,OAAA,CAAUC,qBAAAA,CAAe,IAAA,CAAKH,CAAO,CAAA,CAC1C,IAAA,CAAK,SAAA,CAAYC,CAAAA,CACjB,IAAA,CAAK,OAAA,CAAUC,CACjB,CAEA,SAAA,CAAUE,CAAAA,CAAwB,CAEhC,EAAA,CADA,IAAA,CAAK,OAAA,CAAQ,SAAA,CAAUA,CAAU,CAAA,CAC7B,IAAA,CAAK,UAAA,WAAqBC,uBAAAA,CAC5BD,CAAAA,CAAW,qBAAA,CAAsBE,oBAAAA,CAAc,OAAO,CAAA,CAAA,KAAA,EAAA,CAC7C,IAAA,CAAK,UAAA,WAAqBC,4BAAAA,CACnCH,CAAAA,CAAW,qBAAA,CAAsBE,oBAAAA,CAAc,YAAY,CAAA,CAAA,KAAA,EAAA,CAClD,IAAA,CAAK,UAAA,WAAqBE,mBAAAA,CACnCJ,CAAAA,CAAW,qBAAA,CAAsBE,oBAAAA,CAAc,SAAS,CAAA,CAAA,KAAA,EAAA,CAC/C,IAAA,CAAK,UAAA,WAAqBG,eAAAA,CACnCL,CAAAA,CAAW,qBAAA,CAAsBE,oBAAAA,CAAc,QAAQ,CAAA,CAAA,KAEvD,MAAM,IAAI,KAAA,CAAM,wBAAwB,CAAA,CAE1C,IAAA,CAAK,SAAA,CAAU,SAAA,CAAUF,CAAU,CAAA,CACnCA,CAAAA,CAAW,YAAA,kBAAa,IAAA,CAAK,OAAA,SAAW,IAAE,CAC5C,CAEA,OAAO,WAAA,CAAYM,CAAAA,CAA4B,CAC7C,IAAMV,CAAAA,CAAUG,qBAAAA,CAAe,WAAA,CAAYO,CAAY,CAAA,CACjDC,CAAAA,CAAUD,CAAAA,CAAa,uBAAA,CAAwB,CAAA,CACjDT,CAAAA,CACJ,MAAA,CAAQU,CAAAA,CAAS,CACf,KAAKL,oBAAAA,CAAc,OAAA,CACjBL,CAAAA,CAAYI,uBAAAA,CAAiB,WAAA,CAAYK,CAAY,CAAA,CACrD,KAAA,CACF,KAAKJ,oBAAAA,CAAc,YAAA,CACjBL,CAAAA,CAAYM,4BAAAA,CAAsB,WAAA,CAAYG,CAAY,CAAA,CAC1D,KAAA,CACF,KAAKJ,oBAAAA,CAAc,SAAA,CACjBL,CAAAA,CAAYO,mBAAAA,CAAa,WAAA,CAAYE,CAAY,CAAA,CACjD,KAAA,CACF,KAAKJ,oBAAAA,CAAc,QAAA,CACjBL,CAAAA,CAAYQ,eAAAA,CAAS,WAAA,CAAYC,CAAY,CAAA,CAC7C,KAAA,CACF,OAAA,CACE,MAAM,IAAI,KAAA,CAAM,CAAA,4CAAA,EAA+CC,CAAO,CAAA,CAAA","file":"/Users/greg/git/wallet-standard/dist/common/index.js","sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from '@wallet-standard/core'\n\nexport * from './account'\nexport * from './AccountInfo'\nexport * from './chains'\nexport * from './detect'\nexport * from './errors'\nexport * from './features'\nexport * from './misc'\nexport * from './wallet'\n","import {\n  AccountAddress,\n  AccountAddressInput,\n  AnyPublicKey,\n  Deserializer,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey,\n  MultiKey,\n  PublicKey,\n  Serializable,\n  Serializer,\n  SigningScheme\n} from '@aptos-labs/ts-sdk'\n\nexport interface AccountInfoInput {\n  address: AccountAddressInput\n  publicKey: PublicKey\n  ansName?: string\n}\n\nexport class AccountInfo extends Serializable {\n  readonly address: AccountAddress\n  readonly publicKey: PublicKey\n  readonly ansName?: string\n\n  constructor({ address, publicKey, ansName }: AccountInfoInput) {\n    super()\n    this.address = AccountAddress.from(address)\n    this.publicKey = publicKey\n    this.ansName = ansName\n  }\n\n  serialize(serializer: Serializer) {\n    this.address.serialize(serializer)\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.Ed25519)\n    } else if (this.publicKey instanceof MultiEd25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519)\n    } else if (this.publicKey instanceof AnyPublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.SingleKey)\n    } else if (this.publicKey instanceof MultiKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiKey)\n    } else {\n      throw new Error('Unsupported public key')\n    }\n    this.publicKey.serialize(serializer)\n    serializer.serializeStr(this.ansName ?? '')\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const address = AccountAddress.deserialize(deserializer)\n    const variant = deserializer.deserializeUleb128AsU32()\n    let publicKey: PublicKey\n    switch (variant) {\n      case SigningScheme.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiEd25519:\n        publicKey = MultiEd25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.SingleKey:\n        publicKey = AnyPublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiKey:\n        publicKey = MultiKey.deserialize(deserializer)\n        break\n      default:\n        throw new Error(`Unknown variant index for WrappedPublicKey: ${variant}`)\n    }\n    const ansName = deserializer.deserializeStr() || undefined\n    return new AccountInfo({ address, publicKey, ansName })\n  }\n}\n"]}